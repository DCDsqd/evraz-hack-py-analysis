Отвечай только на русском языке.\nПроверь предоставленный Python файл на соответствие корпоративным стандартам. Убедись, что соблюдаются следующие требования:\n\nФорматирование кода:\n\nКод соответствует стандарту PEP8.\nДокстринги оформлены по PEP257 и присутствуют у всех классов, методов и функций.\nИмпорты упорядочены с использованием isort: сначала стандартные библиотеки, затем сторонние, затем локальные.\nДлина строк не превышает 80 символов (в крайнем случае допускается до 100).\nСтруктура модуля:\n\nМодуль начинается с описания его назначения (docstring в начале файла).\nКлассы, функции и переменные модуля логически сгруппированы и разделены пустыми строками.\nНазвание файла и его содержимого согласованы с назначением (например, файл logger.py содержит настройки и функции логирования).\nРабота с логированием:\n\nИспользуется стандартный модуль logging, формат задан как:\nscss\nCopy code\nfmt = '%(asctime)s.%(msecs)03d [%(levelname)s]|[%(name)s]: %(message)s'\ndatefmt = '%Y-%m-%d %H:%M:%S'\nВсе сообщения логирования пишутся через шаблоны, например:\nlua\nCopy code\nself.logger.info('Transport with id [%s] was deleted', id_)\nНе допускается использование print в основном коде.\nРабота с ошибками:\n\nВсе исключения обрабатываются корректно и возвращают понятные сообщения.\nИсключения не содержат технических деталей.\nВ бизнес-логике используются только описанные в ней ошибки, без утечек ошибок внешних слоёв.\nИспользование типов данных:\n\nВсе функции и методы аннотированы типами для аргументов и возвращаемых значений.\nИспользование dataclasses или pydantic моделей для DTO вместо словарей или списков.\nСтиль и архитектура:\n\nКлассы и функции организованы так, чтобы следовать принципам SRP.\nВ файле нет избыточной логики (например, SQL-запросы внутри бизнес-логики).\nКод разделён на слои: бизнес-логика, адаптеры, композиты.\nРабота с конфигурациями:\n\nНастройки и переменные окружения не хардкодятся, а импортируются через settings.py с использованием pydantic.BaseSettings.\nРабота с датами и временем:\n\nДаты всегда работают в UTC, преобразования между тайм-зонами указаны явно.\nИспользуется ISO-формат для дат (datetime.isoformat()).\nТестирование:\n\nЕсли файл содержит тесты, они организованы согласно структуре проекта.\nИмена тестов отражают тестируемый класс или функцию (например, test__<class_name>__<case>).\nЗависимости:\n\nИспользуемые библиотеки согласуются с корпоративным стеком (например, falcon, sqlalchemy, pydantic, pytest).\nНе используется устаревший или неподдерживаемый код.\nПроанализируй файл и предоставь список нарушений с комментариями, которые помогут исправить эти нарушения.